basePath: /
definitions:
  handler.response:
    properties:
      message:
        type: string
    type: object
  model.LoginRequest:
    properties:
      email:
        example: email@example.com
        type: string
      password:
        example: Password12345!
        maxLength: 50
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  model.PostRequest:
    properties:
      content:
        example: lorem ipsum dolor sit amet ...
        minLength: 3
        type: string
      title:
        example: title
        maxLength: 50
        minLength: 3
        type: string
      user_id:
        type: integer
    required:
    - content
    - title
    type: object
  model.UserRequest:
    properties:
      email:
        example: email@example.com
        type: string
      password:
        example: Password12345!
        maxLength: 50
        minLength: 8
        type: string
      username:
        example: username
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - username
    type: object
host: localhost:8888
info:
  contact:
    email: raitermark@proton.me
    name: Mark Raiter
  description: Docs for Blog API
  title: Blog API
  version: "1.0"
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Login
      tags:
      - auth
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User ID
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register user
      tags:
      - auth
  /api/posts:
    post:
      consumes:
      - application/json
      description: Create a post
      parameters:
      - description: Post object that needs to be created
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/model.PostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Post created
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Create a post
      tags:
      - posts
  /health:
    get:
      description: Healthcheck
      produces:
      - application/json
      responses:
        "200":
          description: healthy
          schema:
            $ref: '#/definitions/handler.response'
      summary: Healthcheck
      tags:
      - health
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
