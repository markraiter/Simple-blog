basePath: /
definitions:
  handler.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.Comment:
    properties:
      body:
        type: string
      email:
        type: string
      id:
        type: integer
      post_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.Post:
    properties:
      body:
        type: string
      id:
        type: integer
      title:
        type: string
      user_id:
        type: integer
    type: object
  models.UpdateCommentInput:
    properties:
      body:
        type: string
      email:
        type: string
    type: object
  models.UpdatePostInput:
    properties:
      body:
        type: string
      title:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a simple blog project for practicing Go REST API.
  title: REST API for Simple Blog Swagger Example
  version: "1.0"
paths:
  /api/comments:
    post:
      consumes:
      - application/json
      description: create comment
      operationId: create-comment
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: integer
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      - description: Comment credentials
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCommentInput'
      produces:
      - application/json
      responses:
        "201":
          description: Comment successfully created. Returns the newly created comment
            id.
          schema:
            type: integer
        "400":
          description: Invalid request or missing required fields.
          schema:
            type: string
        "404":
          description: Post or User with the specified ID does not exists.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Comment
      tags:
      - comments
  /api/comments/{id}:
    delete:
      description: delete a comment by ID
      operationId: delete-comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Comment successfully deleted.
          schema:
            type: string
        "404":
          description: Comment with the specified ID does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Comment
      tags:
      - comments
    get:
      description: get comment by ID
      operationId: get-comment-by-id
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the comment object.
          schema:
            $ref: '#/definitions/models.Comment'
        "404":
          description: Comment with the specified ID does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Comment By ID
      tags:
      - comments
    patch:
      consumes:
      - application/json
      description: update an existing comment
      operationId: update-comment
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: integer
      - description: Comment data to update
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCommentInput'
      produces:
      - application/json
      responses:
        "200":
          description: Comment successfully updated.
          schema:
            $ref: '#/definitions/models.UpdateCommentInput'
        "400":
          description: Invalid request or missing required.
          schema:
            type: string
        "404":
          description: Comment with the specified ID does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Comment
      tags:
      - comments
  /api/comments/all:
    get:
      description: get all comments
      operationId: get-all-comments
      produces:
      - application/json
      responses:
        "200":
          description: Returns an array of comments.
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Comments
      tags:
      - comments
  /api/comments/post:
    get:
      description: filter comments by post
      operationId: filter-comments-by-post
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns an array of comments associated with the post.
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "404":
          description: Comment with specified post_id does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Filter Comments by Post
      tags:
      - comments
  /api/comments/user:
    get:
      description: filter comments by user
      operationId: filter-comments-by-user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns an array of comments created by the user.
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "404":
          description: Comment with specified user_id does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Filter Comments by User
      tags:
      - comments
  /api/posts:
    get:
      description: filter posts by user ID
      operationId: filter-posts-by-user
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns an array of posts created by the user.
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "404":
          description: Post with specified user_id does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Filter Posts by User
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: create post
      operationId: create-post
      parameters:
      - description: User ID
        in: query
        name: user_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Post successfully created. Returns the newly created post id.
          schema:
            type: integer
        "400":
          description: Invalid request or missing required fields.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create Post
      tags:
      - posts
  /api/posts/{id}:
    delete:
      description: delete a post by ID
      operationId: delete-post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Post successfully deleted.
          schema:
            type: string
        "404":
          description: Post with the specified ID does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete Post
      tags:
      - posts
    get:
      description: get post by ID
      operationId: get-post-by-id
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Returns the post object.
          schema:
            $ref: '#/definitions/models.Post'
        "404":
          description: Post with the specified ID does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get Post By ID
      tags:
      - posts
    patch:
      consumes:
      - application/json
      description: update an existing post
      operationId: update-post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: integer
      - description: Post data to update
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostInput'
      produces:
      - application/json
      responses:
        "200":
          description: Post successfully updated.
          schema:
            $ref: '#/definitions/models.UpdatePostInput'
        "400":
          description: Invalid request or missing required.
          schema:
            type: string
        "404":
          description: Post with the specified ID does not exist.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update Post
      tags:
      - posts
  /api/posts/all:
    get:
      description: get all posts
      operationId: get-all-posts
      produces:
      - application/json
      responses:
        "200":
          description: Returns an array of posts.
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get All Posts
      tags:
      - posts
  /auth/sign-in:
    post:
      consumes:
      - application/json
      description: login
      operationId: login
      parameters:
      - description: credentials
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: token
          schema:
            type: string
        "404":
          description: Invalid credentials.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      summary: SignIn
      tags:
      - auth
  /auth/sign-up:
    post:
      consumes:
      - application/json
      description: create account
      operationId: create-account
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/handler.LoginInput'
      produces:
      - application/json
      responses:
        "201":
          description: User successfully registered. Returns the id of the created
            user.
          schema:
            type: integer
        "400":
          description: Invalid request or missing required fields.
          schema:
            type: string
        "409":
          description: User already exists with the provided email or username.
          schema:
            type: string
        "500":
          description: An unexpected error occurred on the server.
          schema:
            type: string
      summary: SignUp
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
